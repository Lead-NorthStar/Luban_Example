using System;
using Newtonsoft.Json;
using System.Collections.Generic;
using Encrypt;
{{
    parent_def_type = __bean.parent_def_type
    export_fields = __bean.export_fields
    hierarchy_export_fields = __bean.hierarchy_export_fields
}}
{{~
func encrypt_type_name(x)
    type = x.ctype.type_name
    case type
        when 'int'
            ret 'EncryptInt'
        when 'float'
            ret 'EncryptFloat'
        when 'double'
            ret 'EncryptDouble'
        when 'long'
            ret 'EncryptLong'
        else 
            ret '==='
    end
end
func is_encrypt_type(x)
    type = x.ctype.type_name
    case type
        when 'bean'
            ret false
        when 'list','array','set'
            case x.ctype.element_type
                when 'int', 'float', 'double', 'long'
                    ret true
                else
                    ret false
            end
        when 'int', 'float', 'double', 'long'
            ret true
        else
            ret false
    end
end
func is_encrypt_base_type(x)
    type = x.ctype.type_name
    case type
        when 'int', 'float', 'double', 'long'
            ret true
        else 
            ret false
    end
end
func is_encrypt_list_type(x)
    type = x.ctype.type_name
    case type 
        when 'list','array','set'
            case x.ctype.element_type
                when 'int', 'float', 'double', 'long'
                    ret true
                else
                    ret false
            end
        else
            ret false
    end
end

func is_list_bean(x)
    type = x.ctype.type_name
    case type
        when 'list','array','set'
            case x.ctype.element_type.type_name
                when 'bean'
                    ret true
                else
                    ret false
            end
        else
            ret false
    end
end

func property_name(x)
    ret '[JsonProperty("' + (x.name) + '")]'
end
~}}
namespace Example
{
	{{~if __bean.comment != '' ~}}
	/// <summary>
	/// {{x.escape_comment}}
	/// </summary>
	{{~end~}}
    [Serializable]
    public partial class {{__bean.name}} : {{if parent_def_type}}{{__bean.parent}}{{else}}AConfig{{end}}
    {
    {{~ for field in export_fields ~}}
		{{~if field.name != "id"~}}
		    {{~if field.comment != '' ~}}
    	/// <summary>
    	/// {{escape_comment field.comment}}
    	/// </summary>
		    {{~end~}}
            {{~if has_tag field.ctype 'text'~}}
        [JsonIgnore]
        public string {{field.name}} => (_{{field.name}} ??= new TranslateText(_{{field.name}}_key)).text;
        
        [JsonProperty("{{field.name}}")]
        private string _{{field.name}}_key { get; set; }

        [JsonIgnore]
        private TranslateText _{{field.name}} { get; set; }
            {{~else if field.ctype.type_name == "bean"~}}
        [JsonProperty]
        public {{declaring_type_name field.ctype}}  {{field.name}} { get; private set; }
            {{~else if is_encrypt_base_type field~}}
        {{property_name field}}
        private {{declaring_type_name field.ctype}} _{{field.name}} { get; set; }

        [JsonIgnore]
        public {{encrypt_type_name field}} {{field.name}} { get; private set; } = new();
            {{~else if is_encrypt_list_type field~}}

        public {{declaring_type_name field.ctype}}  {{field.name}} { get; private set; }

            {{~else if field.ctype.type_name == "list"~}}
        {{property_name field}}
        private {{declaring_type_name field.ctype}} _{{field.name}} { get; set; }
      
        [JsonIgnore]
        private IReadOnlyList<{{declaring_type_name field.ctype.element_type}}> __{{field.name}};

        [JsonIgnore]
        public IReadOnlyList<{{declaring_type_name field.ctype.element_type}}> {{field.name}} => __{{field.name}} ??= _{{field.name}}.AsReadOnly();
            {{~else~}}
        [JsonProperty]
        public {{declaring_type_name field.ctype}}  {{field.name}} { get; private set; }
            {{~end~}}
        {{~ if can_generate_ref field ~}}
            {{~ if is_field_array_like_need_resolve_ref field ~}}
        [JsonIgnore]
        private List<{{declaring_type_name (get_ref_type filed)}}> _{{field.name}}_ref { get; set; }
        [JsonIgnore]
        private IReadOnlyList<{{declaring_type_name (get_ref_type filed)}}> __{{field.name}}_ref;
        [JsonIgnore]
        public IReadOnlyList<{{declaring_type_name (get_ref_type filed)}}> {{field.name}}_ref => __{{field.name}}_ref ??= _{{field.name}}_ref.AsReadOnly();
            {{~else}}
        [JsonIgnore]
        public {{declaring_type_name (get_ref_type field)}} {{field.name}}_ref { get; private set; }
            {{~end~}}
        {{~end~}}
		{{~end~}}
    {{~end~}}

        public override void EndInit() 
        {
        {{~ for field in export_fields ~}}
        {{~if field.name != "id"~}}
            {{~if is_encrypt_type field~}}
            {{field.name}} = _{{field.name}};
            {{~else if field.ctype.type_name == "bean"~}}
            {{field.name}}?.EndInit();
            {{~else if is_list_bean field~}}
            foreach(var _e in {{field.name}}) { _e?.EndInit(); }
            {{~end~}}
        {{~end~}}
        {{~end~}}
            base.EndInit();
        }

        public override void BindRef() 
        {
            {{~ for field in export_fields ~}}
            {{~ if can_generate_ref field ~}}
                {{~ if is_field_array_like_need_resolve_ref field ~}}
            _{{field.name}}_ref = _GetRefList<{{declaring_type_name (get_ref_type field)}}>({{field.name}});
                {{~else}}
            {{field.name}}_ref = _GetRef<{{declaring_type_name (get_ref_type field)}}>({{field.name}});
                {{~end~}}
            {{~end~}}
            {{~end~}}
        }

        public override string ToString() => JsonConvert.SerializeObject(this);
    }
}
