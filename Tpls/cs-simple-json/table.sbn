using System;
using Newtonsoft.Json;
using System.Collections.Generic;
using UnityEngine;

{{~
func index_func(x)
    result=''
    for index in __table.index_list
        result=result + (declaring_type_name index.index_field.ctype) + ' ' + (index.index_field.name) + ','
    end
    ret result | string.remove_last ','
end
func index_key_v(x)
    result=''
    for index in __table.index_list
        result=result + 'v.' + (index.index_field.name) + ','
    end
    ret result | string.remove_last ','
end
func index_key(x)
    result=''
    for index in __table.index_list
        result=result + (index.index_field.name) + ','
    end
    ret result | string.remove_last ','
end
~}}
namespace Example
{
{{~if __table.comment != '' ~}}
    /// <summary>
    /// {{escape_comment __table.comment}}
    /// </summary>
{{~end~}}
    [Config]
    public partial class {{__table.name}} : ACategory
    {
{{~if __table.is_singleton_table}}
        public static {{declaring_type_name __value_type}} Single { get; private set; }

        public override void BeginJsonInit(string json, JsonSerializerSettings settings) 
        {
             Single = JsonConvert.DeserializeObject<{{declaring_type_name __value_type}}>(json, settings);
        }

        public override void GenEndInit() 
        {
            Single.EndInit();
        }

        {{~else if __table.is_list_table~}}

        public static {{__table.name}} Instance { get; private set; }

        public {{__table.name}}()
        {
            Instance = this;
        }

        private Dictionary<({{index_func __table}}), {{declaring_type_name __value_type}}> _group = new();

        private List<{{declaring_type_name __value_type}}> _list;

        public override void BeginJsonInit(string json, JsonSerializerSettings settings) 
        {
            _list = JsonConvert.DeserializeObject<List<{{declaring_type_name __value_type}}>>(json, settings);
        }

        public IReadOnlyDictionary<({{index_func x}}), {{declaring_type_name __value_type}}> GetAll()
        {
            return _group;
        }

        public {{declaring_type_name __value_type}} Get({{index_func __table}})
        {
            _group.TryGetValue(({{index_key __table}}), out var result);
            return result;
        }

        public override void GenEndInit() 
        {
            foreach(var v in _list) v?.EndInit();
        }

{{~else~}}
        public static {{__table.name}} Instance { get; private set; }

        public {{__table.name}}()
        {
            Instance = this;
        }

        private Dictionary<{{declaring_type_name __key_type}}, {{declaring_type_name __value_type}}> _dic;

        public override void BeginJsonInit(string json, JsonSerializerSettings settings) 
        {
            _dic = JsonConvert.DeserializeObject<Dictionary<{{declaring_type_name __key_type}}, {{declaring_type_name __value_type}}>>(json, settings);
        }

        public {{declaring_type_name __value_type}} Get({{declaring_type_name __key_type}} key)
        {
            _dic.TryGetValue(key, out var result);
            return result;
        }
        
        public IReadOnlyDictionary<{{declaring_type_name __key_type}}, {{declaring_type_name __value_type}}> GetAll() => _dic;

        public override void GenEndInit() 
        {
            foreach(var v in _dic.Values) v?.EndInit();
        }
{{~end~}}
    }
}