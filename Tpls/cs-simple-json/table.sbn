using System;
using Newtonsoft.Json;
using System.Collections.Generic;
using UnityEngine;
using System.Linq;

{{~
func index_func(x)
    result=''
    for index in __table.index_list
        result=result + (declaring_type_name index.index_field.ctype) + ' ' + (index.index_field.name) + ','
    end
    ret result | string.remove_last ','
end
func index_key_v(x)
    result=''
    for index in __table.index_list
        result=result + 'v.' + (index.index_field.name) + ','
    end
    ret result | string.remove_last ','
end
func index_key(x)
    result=''
    for index in __table.index_list
        result=result + (index.index_field.name) + ','
    end
    ret result | string.remove_last ','
end
~}}
namespace Example
{
	{{~if __table.comment != '' ~}}
    /// <summary>
    /// {{escape_comment __table.comment}}
    /// </summary>
	{{~end~}}
    [Config]
    public partial class {{__table.name}} : ACategory<{{declaring_type_name __value_type}}>
    {
        public static {{__table.name}} Instance { get; private set; }

        public {{__table.name}}()
        {
            Instance = this;
        }

    {{~if __table.is_singleton_table}}
        public static {{declaring_type_name __value_type}} Single { get; private set; }

        public override AConfig GetOne()
        {
            throw new NotImplementedException();
        }

        public override AConfig[] GetAll()
        {
            throw new NotImplementedException();
        }
        
        public override AConfig TryGet(int id)
        {
            throw new NotImplementedException();
        }

        protected override void _CustomDeserialize(string json, JsonSerializerSettings settings)
        {
            Single = JsonConvert.DeserializeObject<{{declaring_type_name __value_type}}>(json, settings);
            Single.EndInit();
        }

        public override void BindRef()
        {
            Single.BindRef();
        }

        {{~else if __table.is_list_table~}}

        private Dictionary<({{index_func __table}}), {{declaring_type_name __value_type}}> _group = new();

        public override AConfig GetOne()
        {
            foreach(var v in _group.Values)
            {
                return v;
            }
            return null;
        }

        public override AConfig[] GetAll()
        {
            return _group.Values.ToArray();
        }
        
        public override AConfig TryGet(int id)
        {
            throw new NotImplementedException();
        }

        protected override void _CustomDeserialize(string json, JsonSerializerSettings settings)
        {
            var list = JsonConvert.DeserializeObject<List<{{declaring_type_name __value_type}}>>(json, settings);
            
            foreach(var v in list)
            {
                v.EndInit();
            }

            foreach(var v in list)
            {
                _group.Add(({{index_key_v __table}}), v);
            }
        }

        public {{declaring_type_name __value_type}} TryGet({{index_func __table}})
        {
            _group.TryGetValue(({{index_key __table}}), out var result);
            return result;
        }
        {{~else~}}
    {{~end~}}
    }
}
