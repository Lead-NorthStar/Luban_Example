using System;
using Newtonsoft.Json;
using System.Collections.Generic;
using MemoryPack;

{{
    parent_def_type = __bean.parent_def_type
    export_fields = __bean.export_fields
    hierarchy_export_fields = __bean.hierarchy_export_fields
    index = 0
}}
{{~
func encrypt_type_name(x)
    type = x.ctype.type_name
    case type
        when 'int'
            ret 'EncryptInt'
        when 'float'
            ret 'EncryptFloat'
        when 'double'
            ret 'EncryptDouble'
        when 'long'
            ret 'EncryptLong'
        else 
            ret '==='
    end
end
func is_encrypt_type(x)
    type = x.ctype.type_name
    case type
        when 'bean'
            ret false
        when 'list','array','set'
            case x.ctype.element_type
                when 'int', 'float', 'double', 'long'
                    ret true
                else
                    ret false
            end
        when 'int', 'float', 'double', 'long'
            ret true
        else
            ret false
    end
end
func is_encrypt_base_type(x)
    type = x.ctype.type_name
    case type
        when 'int', 'float', 'double', 'long'
            ret true
        else 
            ret false
    end
end
func is_encrypt_list_type(x)
    type = x.ctype.type_name
    case type 
        when 'list','array','set'
            case x.ctype.element_type
                when 'int', 'float', 'double', 'long'
                    ret true
                else
                    ret false
            end
        else
            ret false
    end
end

func is_list_bean(x)
    type = x.ctype.type_name
    case type
        when 'list','array','set'
            case x.ctype.element_type.type_name
                when 'bean'
                    ret true
                else
                    ret false
            end
        else
            ret false
    end
end
~}}
namespace Example
{
	{{~if __bean.comment != '' ~}}
	/// <summary>
	/// {{x.escape_comment}}
	/// </summary>
	{{~end~}}
    [MemoryPackable]
    {{gen_union __bean}}
    public {{if __bean.is_abstract_type}}abstract{{end}} partial class {{__bean.name}}{{if parent_def_type}} : {{__bean.parent}}, IUIParam{{else}}: IUIParam{{end}}
    {
    {{~ for field in export_fields ~}}
        {{~if field.comment != '' ~}}
        /// <summary>
        /// {{escape_comment field.comment}}
        /// </summary>
        {{~end~}}
        {{~if has_tag field.ctype 'text'~}}
        [MemoryPackIgnore]
        public string {{field.name}} => (_{{field.name}} ??= new TranslateText(_{{field.name}}_key)).text;
        
        [MemoryPackOrder({{index++}})]
        public string _{{field.name}}_key { get; private set; } 

        [MemoryPackIgnore]
        private TranslateText _{{field.name}} { get; set; }

        {{~else if field.ctype.type_name == "bean"~}}
        [MemoryPackOrder({{index++}})]
        public {{declaring_type_name field.ctype}}  {{field.name}} { get; private set; }

        {{~else if field.ctype.type_name == "list"~}}
        [MemoryPackOrder({{index++}})]
        public IReadOnlyList<{{declaring_type_name field.ctype.element_type}}> {{field.name}} { get; private set;}

        {{~else~}}
        [MemoryPackOrder({{index++}})]
        public {{declaring_type_name field.ctype}}  {{field.name}} { get; private set; }

        {{~end~}}
        {{~ if can_generate_ref field ~}}
            {{~ if is_field_array_like_need_resolve_ref field ~}}
        [MemoryPackIgnore]
        public IReadOnlyList<{{declaring_type_name (get_ref_type filed)}}> {{field.name}}_ref { get; private set; }
        
            {{~else}}
        [MemoryPackIgnore]
        public {{declaring_type_name (get_ref_type field)}} {{field.name}}_ref { get; private set; }
            {{~end~}}
        {{~end~}}
    {{~end~}}

        {{gen_config_constructor __bean}}

        public {{if __bean.is_abstract_type}}virtual{{else if parent_def_type}}override{{end}} void BindRef() 
        {
        {{~ for field in export_fields ~}}
        {{~ if can_generate_ref field ~}}
            {{~ if is_field_array_like_need_resolve_ref field ~}}
            _{{field.name}}_ref = _GetRefList<{{declaring_type_name (get_ref_type field)}}>({{field.name}});
            {{~else}}
            {{field.name}}_ref = _GetRef<{{declaring_type_name (get_ref_type field)}}>({{field.name}});
            {{~end~}}
        {{~end~}}
        {{~end~}}
        {{~ if parent_def_type~}}
            base.BindRef();
        {{~end~}}
        }
    }
}